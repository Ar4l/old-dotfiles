# Status bars
# Colors taken from Gruvbox (Dark)

text=#d79921                    # dark yellow
textbright=#fabd2f              # bright yellow
surface2=#585B70
gray=#928374

bg=#282828
bg1=#3c3836
bg2=#504945

set -g default-shell /usr/bin/zsh
set -g status on

set -g status-style fg=$text
set -g pane-border-style fg=$bg1
set -g pane-active-border-style fg=$bg2

# may be nice to reintroduce:  
set -g window-status-current-format "#[fg=$bg1,bg=$text,bold] #I #[fg=$text,bg=$bg2] #W #[fg=$text,bg=$bg2] #{s|$HOME|~|;s|.*/||:pane_current_path} "
set -g window-status-format "#[fg=$bg,bg=$bg2] #I #[fg=$gray,bg=#3c3836] #W #[fg=$gray,bg=#3c3836] #{s|$HOME|~|;s|.*/||:pane_current_path} "

set -g base-index 1
set -g pane-base-index 1
set -g -w automatic-rename on
set -g renumber-windows on
set -g bell-action none
set -g status-position bottom
set -g status-interval 5
set -g window-status-separator ' '

set -g status-right-length 100
set -g status-left-length 100
set -g status-left ""
set -g status-right ""
set -g status-justify centre

# no clue
set -g escape-time 0
set -g focus-events on
# set -g monitor-activity off
# set -g visual-activity off

## Term stuff
set -g default-terminal "tmux-256color"
set -ga terminal-overrides ",xterm-256color:Tc"

# vi-style controls for copy mode
# NOTE: there is 
set -g mode-keys vi
set -g status-keys vi

# Mouse controls
set -g mouse on
set -g @emulate-scroll-for-no-mouse-alternate-buffer "on"
# we have scrollwheels now, only scroll by 1 line :)
bind-key -T copy-mode-vi WheelUpPane select-pane \; send-keys -t '{mouse}' -X clear-selection \; send-keys -t '{mouse}' -X -N 1 scroll-up
bind-key -T copy-mode-vi WheelDownPane select-pane \; send-keys -t '{mouse}' -X clear-selection \; send-keys -t '{mouse}' -X -N 1 scroll-down

# TODO: but don't jump to the prompt if i select something
# (I mean, really?)
# unbind -T copy-mode-vi MouseDragEnd1Pane
# but this makes the copying flaky and requires me to press y.
# I just don't want to have my position change on the screen.

# set -g @plugin 'tmux-plugins/tpm'
# set -g @plugin 'christoomey/vim-tmux-navigator'
# set -g @plugin 'tmux-plugins/tmux-resurrect'

bind-key r source-file ~/.tmux.conf \; display-message "~/.tmux.conf reloaded"

# unbind-key n
# unbind-key "c"
# unbind C-b

# TODO: Extremely tempted to set prefix to [TAB] as long as I can find a way
# for it not to interfere with VIM edit mode. 
set-option -g prefix C-b
# set-option -g prefix C-i
# bind-key C-i send-prefix

# TODO: And, also set next/prev window to C-tab and C-shift-tab; as it is 
# in all other applications. Remove this binding from kitty though, where
# I'm used to the MacOS cmd+} and cmd+{

bind-key -n M-n new-window -c "#{pane_current_path}"
bind-key -n M-[ previous-window
bind-key -n M-] next-window
bind-key -n M-{ swap-window -t -1\; select-window -t -1
bind-key -n M-\} swap-window -t +1\; select-window -t +1

# please don't fuck with my alt keys
set-option -g xterm-keys on

# bind-key -n M-1 select-window -t:1
# bind-key -n M-2 select-window -t:2
# bind-key -n M-3 select-window -t:3
# bind-key -n M-4 select-window -t:4
# bind-key -n M-5 select-window -t:5
# bind-key -n M-6 select-window -t:6
# bind-key -n M-7 select-window -t:7
# bind-key -n M-8 select-window -t:8
# bind-key -n M-9 select-window -t:9
# bind-key -n M-0 select-window -t:10

# unbind-key '"'
# unbind-key '%'
# bind-key -n M-- split-window -v -c "#{pane_current_path}"
# bind-key -n M-\\ split-window -h -c "#{pane_current_path}"
# bind-key -n M-_ split-window -fv -c "#{pane_current_path}"
# bind-key -n M-| split-window -fh -c "#{pane_current_path}"

# bind-key -T copy-mode-vi M-H resize-pane -L 1
# bind-key -T copy-mode-vi M-J resize-pane -D 1
# bind-key -T copy-mode-vi M-K resize-pane -U 1
# bind-key -T copy-mode-vi M-L resize-pane -R 1

# bind-key -n M-z resize-pane -Z

# unbind-key '{'
# unbind-key '}'
# bind-key -r H swap-pane -U
# bind-key -r L swap-pane -D
#
# bind-key -n M-q kill-pane
# bind-key -n M-Q kill-window
#
# bind-key -r '[' swap-window -t -1
# bind-key -r ']' swap-window -t +1

# unbind-key '&'

# bind-key -n M-v copy-mode
# bind-key -T copy-mode-vi v send-keys -X begin-selection
# bind-key -T copy-mode-vi V send-keys -X select-line
# bind-key -T copy-mode-vi C-v send-keys -X rectangle-toggle
# bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "wl-copy"
# bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "wl-copy"
# bind-key -T copy-mode-vi Escape send-keys -X cancel
# unbind-key -T copy-mode-vi MouseDragEnd1Pane

# bind-key '/' copy-mode \; send-keys "/"
# bind-key '?' copy-mode \; send-keys "?"

# is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
#     | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

# bind-key -n M-h if-shell "$is_vim" "send-keys M-h" "select-pane -L"
# bind-key -n M-j if-shell "$is_vim" "send-keys M-j" "select-pane -D"
# bind-key -n M-k if-shell "$is_vim" "send-keys M-k" "select-pane -U"
# bind-key -n M-l if-shell "$is_vim" "send-keys M-l" "select-pane -R"
#
# bind -n M-H resize-pane -L 1
# bind -n M-L resize-pane -R 1
# bind -n M-K resize-pane -U 1
# bind -n M-J resize-pane -D 1
#
# bind-key -T copy-mode-vi M-h select-pane -L
# bind-key -T copy-mode-vi M-j select-pane -D
# bind-key -T copy-mode-vi M-k select-pane -U
# bind-key -T copy-mode-vi M-l select-pane -R

# run '~/.tmux/plugins/tpm/tpm'

# TODO: fuck it why not use C-w in the first place:
# need to set it up approriately:
# see kitty-tmux-vim navigator
# bind-key    -T root C-w   switch-client -T Cw
# bind-key -r -T Cw   Right select-pane   -R
# bind-key -r -T Cw   Left  select-pane   -L
# bind-key -r -T Cw   Up    select-pane   -U
# bind-key -r -T Cw   Down  select-pane   -D

# TODO: SSH aware kitty change window
# hah, good luck.
# if-shell '[ $SSH_TTY ]' 'to="--to=tcp:localhost:$KITTY_PORT "' 'to=""'
# move='kitty @ ${to}kitten neighboring_window.py'

# # Key Binds
# bind-key -n 'C-h' if-shell "[ #{pane_at_left} != 1 ]" "select-pane -L" "run-shell '$move left'"
# bind-key -n 'C-j' if-shell "[ #{pane_at_bottom} != 1 ]" "select-pane -D" "run-shell '$move bottom'"
# bind-key -n 'C-k' if-shell "[ #{pane_at_top} != 1 ]" "select-pane -U" "run-shell '$move top'"
# bind-key -n 'C-l' if-shell "[ #{pane_at_right} != 1 ]" "select-pane -R" "run-shell '$move right'"

# Seeing as it now is actually feasible to scroll, and we live in a time with plenty of storage,
# let's up the history we store from 2000 to like 100000
set-option -g history-limit 100000
# set -g history-file ~/.tmux_history

# split windows like vim
# vim's definition of a horizontal/vertical split is reversed from tmux's
bind s split-window -v
bind v split-window -h

# # move around panes with hjkl, as one would in vim after pressing ctrl-w
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# resize panes like vim
# feel free to change the "1" to however many lines you want to resize by, only
# one at a time can be slow
bind < resize-pane -L 1
bind > resize-pane -R 1
bind - resize-pane -D 1
bind + resize-pane -U 1

# bind : to command-prompt like vim
# this is the default in tmux already
bind : command-prompt
